{"version":3,"file":"index.js","sources":["../node_modules/.pnpm/koa-compose@4.1.0/node_modules/koa-compose/index.js","../src/index.ts"],"sourcesContent":["'use strict'\n\n/**\n * Expose compositor.\n */\n\nmodule.exports = compose\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose (middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n","import compose from 'koa-compose';\n\ntype PrimitiveType = string | number | boolean | null | undefined;\n\ndeclare type SerializableData = string | number | boolean | null | undefined | SerializableData[] |\n    { [name: string]: SerializableData };\n\ntype ReqOptions = {\n  method?: Method | MethodLowercase,\n  base?: string,\n  headers?: Headers | Record<string, string>,\n  query?: URLSearchParams | string | Record<string, PrimitiveType> | [string, PrimitiveType][],\n  params?: Record<string, string | number | boolean>,\n  body?: ReqBody | SerializableData,\n  parseResponseBody?: boolean,\n  throwFailedResponse?: boolean,\n  use?: Middleware[],\n  useBefore?: Middleware[],\n  useAfter?: Middleware[],\n  [name: string]: unknown\n};\n\ntype Method = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'PURGE';\ntype MethodLowercase = 'get' | 'post' | 'put' | 'delete' | 'patch' | 'head' | 'purge';\n\ntype ReqBody = string | FormData | URLSearchParams | Blob | BufferSource | ReadableStream;\n\ntype MiddlewareCtx = {\n  url: URL,\n\n  options: {\n    method: Method,\n    headers: Headers,\n    body: ReqBody\n  },\n\n  parseResponseBody: boolean,\n  response?: Response,\n  [name: string]: unknown\n};\n\ntype Middleware = (ctx: MiddlewareCtx, next: () => Promise<unknown>) => Promise<unknown>;\n\ntype Query = string | Record<string, PrimitiveType> | [string, PrimitiveType][];\n\nfunction createURLSearchParams(query: Query) {\n  if (query.constructor === String) {\n    return new URLSearchParams(query);\n  }\n\n  if (query.constructor === Object) {\n    query = Object.entries(query);\n  }\n\n  const q = new URLSearchParams();\n\n  for (const [name, value] of query as [string, PrimitiveType][]) {\n    if (value !== null && value !== undefined) {\n      q.append(name, value as string);\n    }\n  }\n\n  return q;\n}\n\ntype FormBody = Record<string, PrimitiveType | Blob> | [string, PrimitiveType | Blob, string?][];\n\nfunction createFormData(data: FormBody) {\n  if (data.constructor === Object) {\n    data = Object.entries(data);\n  }\n\n  const f = new FormData();\n\n  for (const [name, value, filename] of data as [string, PrimitiveType | Blob, string?][]) {\n    if (value !== null && value !== undefined) {\n      f.append(name, value as string, filename);\n    }\n  }\n\n  return f;\n}\n\nclass Teleman {\n  base?: string\n\n  headers?: Headers | Record<string, string>\n\n  parseResponseBody: boolean\n\n  throwFailedResponse: boolean\n\n  middleware: Middleware[] = []\n\n  constructor({\n    base,\n    headers,\n    parseResponseBody = true,\n    throwFailedResponse = true\n  }: {\n    base?: string,\n    headers?: Headers | Record<string, string>,\n    parseResponseBody?: boolean,\n    throwFailedResponse?: boolean\n  } = {}) {\n    if (base) {\n      this.base = base;\n    } else {\n      try {\n        // defaults to document.baseURI in browser\n        this.base = document.baseURI;\n      } catch (e) {\n        // in node.js, ignore\n      }\n    }\n\n    this.headers = headers;\n    this.parseResponseBody = parseResponseBody;\n    this.throwFailedResponse = throwFailedResponse;\n  }\n\n  use(middleware: Middleware, beginning = false): void {\n    if (beginning) {\n      this.middleware.unshift(middleware);\n    } else {\n      this.middleware.push(middleware);\n    }\n  }\n\n  fetch(path: string, {\n    method = 'GET',\n    base = this.base,\n    headers,\n    query,\n    params = {},\n    body,\n    parseResponseBody = this.parseResponseBody,\n    throwFailedResponse = this.throwFailedResponse,\n    use = this.middleware,\n    useBefore = [],\n    useAfter = [],\n    ...rest\n  }: ReqOptions = {}): Promise<unknown> {\n    return new Promise(resolve => {\n      method = method.toUpperCase() as Method;\n      const url = new URL(path.replace(/:([a-z]\\w*)/ig, (_, w) => encodeURIComponent(params[w])), base);\n\n      if (query) {\n        if (!(query instanceof URLSearchParams)) {\n          query = createURLSearchParams(query);\n        }\n\n        query.forEach((value, name) => url.searchParams.append(name, value));\n      }\n\n      if (this.headers && headers) {\n        const h = new Headers(this.headers);\n        new Headers(headers).forEach((value, name) => h.set(name, value));\n        headers = h;\n      } else {\n        headers = new Headers(this.headers || headers || {});\n      }\n\n      if (body !== undefined && body !== null && !['GET', 'HEAD'].includes(method)) {\n        const contentType = headers.get('Content-Type') || '';\n\n        if ((!contentType && body && body.constructor === Object) || contentType.startsWith('application/json')) {\n          if (!headers.has('Content-Type')) {\n            headers.set('Content-Type', 'application/json');\n          }\n\n          body = JSON.stringify(body);\n        } else if (contentType.startsWith('multipart/form-data') && body && !(body instanceof FormData)) {\n          body = createFormData(body as FormBody);\n        } else if (contentType.startsWith('application/x-www-form-urlencoded') && body && !(body instanceof URLSearchParams)) {\n          body = createURLSearchParams(body as Query);\n        }\n      }\n\n      const ctx: MiddlewareCtx = {\n        url,\n\n        options: {\n          method,\n          headers,\n          body: body as ReqBody\n        },\n\n        parseResponseBody,\n        ...rest\n      };\n\n      resolve(compose([...useBefore, ...use, ...useAfter])(ctx, () =>\n        fetch(ctx.url.href, ctx.options).then(response => {\n          ctx.response = response;\n\n          let body: Promise<unknown> = Promise.resolve();\n\n          if (parseResponseBody && ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'PURGE'].includes(ctx.options.method.toUpperCase())) {\n            const responseType = response.headers.get('Content-Type');\n\n            if (responseType) {\n              if (responseType.startsWith('application/json')) {\n                body = response.json();\n              } else if (responseType.startsWith('text/')) {\n                body = response.text();\n              } else if (responseType.startsWith('multipart/form-data')) {\n                body = response.formData();\n              }\n            }\n          }\n\n          if (response.ok || !throwFailedResponse) {\n            return body;\n          } else {\n            return body.then(e => {\n              throw e;\n            });\n          }\n        })\n      ));\n    });\n  }\n\n  get(path: string, query?: Query, options?: Omit<ReqOptions, 'method' | 'query'>): Promise<unknown> {\n    return this.fetch(path, {\n      ...options,\n      method: 'GET',\n      query\n    });\n  }\n\n  post(path: string, body?: ReqBody, options?: Omit<ReqOptions, 'method' | 'body'>): Promise<unknown> {\n    return this.fetch(path, {\n      ...options,\n      method: 'POST',\n      body\n    });\n  }\n\n  put(path: string, body?: ReqBody, options?: Omit<ReqOptions, 'method' | 'body'>): Promise<unknown> {\n    return this.fetch(path, {\n      ...options,\n      method: 'PUT',\n      body\n    });\n  }\n\n  patch(path: string, body?: ReqBody, options?: Omit<ReqOptions, 'method' | 'body'>): Promise<unknown> {\n    return this.fetch(path, {\n      ...options,\n      method: 'PATCH',\n      body\n    });\n  }\n\n  delete(path: string, query?: Query, options?: Omit<ReqOptions, 'method' | 'query'>): Promise<unknown> {\n    return this.fetch(path, {\n      ...options,\n      method: 'DELETE',\n      query\n    });\n  }\n\n  head(path: string, query?: Query, options?: Omit<ReqOptions, 'method' | 'query'>): Promise<unknown> {\n    return this.fetch(path, {\n      ...options,\n      method: 'HEAD',\n      query\n    });\n  }\n\n  purge(path: string, query?: Query, options?: Omit<ReqOptions, 'method' | 'query'>): Promise<unknown> {\n    return this.fetch(path, {\n      ...options,\n      method: 'PURGE',\n      query\n    });\n  }\n}\n\nexport default Teleman;\nexport { Teleman };\nexport const teleman = new Teleman();\n"],"names":["compose"],"mappings":"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"}