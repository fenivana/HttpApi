{"version":3,"file":"Teleman.js","sources":["../src/index.mjs"],"sourcesContent":["class Teleman {\n  constructor({ base = '', requestOptions = {}, beforeCreateRequest, complete, error } = {}) {\n    this.base = base\n    this.requestOptions = requestOptions\n    this.beforeCreateRequest = beforeCreateRequest\n    this.complete = complete\n    this.error = error\n  }\n\n  fetch(url, { method = 'GET', headers, query, body, type } = {}) {\n    return new Promise(resolve => {\n      if (this.base && !/^http(s?):/.test(url)) {\n        url = this.base + url\n      }\n\n      method = method.toUpperCase()\n\n      if (query) {\n        url = new URL(url)\n\n        if (!(query instanceof URLSearchParams)) {\n          // filter null/undefined\n          if (query.constructor === Object) {\n            query = Object.entries(query)\n          }\n\n          if (query instanceof Array) {\n            const q = new URLSearchParams()\n            query.forEach(([name, value]) => {\n              if (value != null) q.append(name, value)\n            })\n            query = q\n          } else if (query.constructor === String) {\n            query = new URLSearchParams(query)\n          }\n        }\n\n        for (const [name, value] of query.entries()) {\n          url.searchParams.append(name, value)\n        }\n\n        url = url.href\n      }\n\n      if (this.requestOptions.headers && headers) {\n        const h = new Headers(this.requestOptions.headers)\n        for (const [name, value] of new Headers(headers).entries()) {\n          h.set(name, value)\n        }\n        headers = h\n      } else {\n        headers = new Headers(this.requestOptions.headers || headers || undefined)\n      }\n\n      if (['POST', 'PUT', 'PATCH'].includes(method)) {\n        if (type === 'json' || !type && body && body.constructor === Object) {\n          if (!headers.has('Content-Type')) {\n            headers.set('Content-Type', 'application/json')\n          }\n\n          body = JSON.stringify(body)\n        } else if (type === 'form' && !(body instanceof FormData)) {\n          const form = new FormData()\n\n          for (const k in body) {\n            form.append(k, body[k])\n          }\n\n          body = form\n        }\n      }\n\n      let options = { ...this.requestOptions, method, headers, body }\n\n      if (this.beforeCreateRequest) {\n        const modified = this.beforeCreateRequest(url, options)\n        if (modified && modified.url && modified.options) {\n          ({ url, options } = modified)\n        }\n      }\n\n      const request = new Request(url, options)\n\n      resolve(fetch(request).then(response => {\n        let body\n\n        if (['GET', 'POST', 'PUT', 'DELETE', 'PATCH'].includes(method)) {\n          const contentType = response.headers.get('Content-Type')\n          if (contentType) {\n            if (contentType.startsWith('application/json')) {\n              body = response.json()\n            } else if (contentType.startsWith('text/')) {\n              body = response.text()\n            }\n          }\n        }\n\n        // if complete handler is given, you should check response.ok yourself in the handler\n        if (this.complete) {\n          return body\n            ? body.then(body => this.complete({ request, response, body }))\n            : this.complete({ request, response, body })\n        } else if (response.ok) {\n          return body || response\n        } else {\n          throw body || response\n        }\n      }, error => {\n        if (this.error) this.error({ request, error })\n        else throw error\n      }))\n    })\n  }\n\n  get(url, query, options) {\n    return this.fetch(url, {\n      method: 'GET',\n      query,\n      ...options\n    })\n  }\n\n  post(url, body, options) {\n    return this.fetch(url, {\n      method: 'POST',\n      body,\n      ...options\n    })\n  }\n\n  put(url, body, options) {\n    return this.fetch(url, {\n      method: 'PUT',\n      body,\n      ...options\n    })\n  }\n\n  patch(url, body, options) {\n    return this.fetch(url, {\n      method: 'PATCH',\n      body,\n      ...options\n    })\n  }\n\n  delete(url, query, options) {\n    return this.fetch(url, {\n      method: 'DELETE',\n      query,\n      ...options\n    })\n  }\n\n  head(url, query, options) {\n    return this.fetch(url, {\n      method: 'HEAD',\n      query,\n      ...options\n    })\n  }\n}\n\nexport default Teleman\n"],"names":["Teleman","base","requestOptions","beforeCreateRequest","complete","error","fetch","url","method","headers","query","body","type","Promise","resolve","test","toUpperCase","URL","URLSearchParams","constructor","Object","entries","Array","q","forEach","name","value","append","String","searchParams","href","h","Headers","set","undefined","includes","has","JSON","stringify","FormData","form","k","options","modified","request","Request","then","response","contentType","get","startsWith","json","text","ok","post","put","patch","delete","head"],"mappings":"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"}